06.08  品牌的增删改查
使用uploadify上传品牌logo：
使用js将上传成功后的图片地址写入img标签
$('#img_logo').attr("src",data.fileUrl).show();
将上传成功后的图片地址写入logo字段(数据库的logo字段)
$('#logo_path').val(data.fileUrl);
模型中定义的存放图片的变量就可以不用了，规则也不需要再为该变量指定了
在视图中，设置一个隐藏域，传递url到控制器
echo $form->field($brand,'logo')->hiddenInput(['id' => 'logo_path']);
然后在控制器中接收post传值

06.09  文章和文章分类的增删改查
1.因为文章分类要和文章进行关联，所以需要建立和文章分类表的关系
return $this->hasOne(ArticleCategory::className(),['id'=>'article_category_id']);
2.文章表需要使用垂直分表，要和文章详情关联，所以建立和文章详情表的关系
return $this->hasOne(ArticleDetail::className(),['article_id'=>'id']);
3.文章管理时使用到多模型同时输入，所以实例化、加载、验证等都需要执行两次（一次文章表，一次文章详情表）
比如实例化：
    $article = new Article();
    $detail = new ArticleDetail();

06.11  商品分类的增删改查  使用：嵌套集合   ztree插件
1.关于商品分类表：lft左值  rgt右值  tree树值  parent_id父类id  depth层级
2.关于增改：
    控制器需要接收从视图传过来的parent_id，并且判断是否为顶级分类，不是顶级分类就找到其父并加入到该父类下$goods_cates->prependTo($parent);，是就将传过来的数据作为顶级分类添加$goods_cates->makeRoot();
    ArrayHelper::merge()  合并两个数组
3.ztree插件的一些注意点：fadeToggle()方法可以在 fadeIn() 与 fadeOut() 方法之间进行切换
                         遍历查找当前分类的子孙分类（根据当前分类的tree和左右值）

06.12  商品的增删改查、相册、搜索
1.关于增加：使用uploadify   ztree   ueditor插件
    uploadify上传文件，ztree分级显示商品分类，ueditor编辑商品详情文本
    在新增商品时，以年月日+今日的商品数量作为商品的编号，同时修改每日商品统计表中的count数量
    获取当前的日期，并查询每日商品统计表中是否存在当前日期，存在则取出数量，不存在则为1，注意：可以使用sprintf()函数补0。
2.关于相册：使用fileinput插件，上传并预览图片文件
  应循环多张商品图来进行上传和上传处理，要注意一个细节：UploadedFile应该在验证之前
    'options' => ['multiple' => true],  用于指定多图上传  false则不能多图上传
3.关于搜索：
    在视图创建表单，提交到index操作，注意要写了表单的action之后地址栏才会更新，否则会一直向后面拼接
    控制器接收后，查询结果，要使用andWhere()而不是直接使用where();

06.14  管理员的增删改查  登录  注销  自动登录
1.关于增改：增加管理员时需要输入帐号密码等字段，但是在修改时就不需要使用密码字段，对于这种情况，可以使用场景
    指定add的场景字段为全部，指定update的场景字段为除了密码的其他字段
    需要注意：因为验证了用户名和邮箱不能重复，用户名或邮箱重复时，会跳转回新增页面并带着用户输入的值，在视图中又对密码进行了判断，如果存在，那么就不会显示密码框，所以这样会导致用户名/邮箱重复后，无法显示密码框，所以，我自己重新定义了一个变量来作为用户输入的密码以解决这个问题
    if(!$admin->password_hash){
        //这里使用自己定义的字段名  否则在判断重名后  会隐藏掉密码框  因为password_hash已经有值
        echo $form->field($admin,'password')->passwordInput();
        echo $form->field($admin,'repassword')->passwordInput();
    }
    密码使用加盐加密
2.关于登录和注销：登录时管理员输入用户名和密码，根据这两个字段来判定
    在表单模型中定义规则：从user表中查询出用户名对应的信息，如果不存在，则添加错误信息，如果存在信息，则继续判断密码是否比对成功，密码比对失败，添加错误信息，比对成功则登录（\Yii::$app->user->login($admin);）
    密码使用\Yii::$app->security->validatePassword()进行比对
    注销时使用\Yii::$app->user->logout();
3.关于自动登录
    判断用户是否点击了自动登录，如果点击了保存一周，否则不保存：
    $duration = $this->is_remember ? 7*24*3600 : 0;
    然后在登录时加上过期时间：
    \Yii::$app->user->login($admin,$duration);

06.16  用户的角色和权限管理及关联
1.权限管理
    通过\Yii::$app->authManager->getPermission($this->name)判断是否存在当前输入的权限
    不存在该权限则创建，\Yii::$app->authManager->createPermission($this->name)
2.角色管理
    通过\Yii::$app->authManager->getRole($this->name)判断是否存在当前输入的角色
    不存在该角色则创建，\Yii::$app->authManager->createRole($this->name)
3.权限和角色关联
    通过\Yii::$app->authManager->addChild($role,$permission);将权限$permission加入到角色$role中
4.用户和角色关联
    \Yii::$app->authManager->assign($role,$id);将角色$role分配给user_id为$id的用户
5.在修改时，无论是角色还是用户，为了方便，都可以先清除后再重新关联
    例如，在修改角色权限时，先通过\Yii::$app->authManager->removeChildren($role);清除掉$role关联的所有权限，再创建权限，然后通过\Yii::$app->authManager->addChild($role,$permissionOfRole);将权限$permissionOfRole加入到角色$role中
    注意，在给角色关联权限，给用户关联角色时，因为是多对多的关系，所以提交的是数据形式，应该遍历该数组添加
关于权限和角色的方法：
    \Yii::$app->authManager->getPermission($name)  获取到$name的权限
    \Yii::$app->authManager->createPermission($this->name)  创建一个$name权限，返回一个permission对象
    \Yii::$app->authManager->add($permission)  将$permission权限加入到数据库
    \Yii::$app->authManager->update($name,$permission)  修改$name下的$permission权限，返回布尔值
    \Yii::$app->authManager->getRole($name) 获取到$name的角色
    \Yii::$app->authManager->createRole($name)  创建$name角色
    \Yii::$app->authManager->addChild($role,$permission)  将$permission权限关联到$role角色下
    \Yii::$app->authManager->removeChildren($role) 清除$role对应的所有权限
    \Yii::$app->authManager->revokeAll($id)  清除$id对应的所有角色

06.18  菜单的增删改查
因为过滤器只能拦截url的访问，用户在页面上还是能看到自己无权操作的管理，所以要使用菜单让无权管理的用户看不见菜单
因为是二级菜单，所以要获取到当前的一级菜单的儿子，因为是一对多的关系，使用hasMany()
return $this->hasMany(self::className(),['parent_id'=>'id']);
从数据库读出所有的一级菜单(parent_id = 0)，然后遍历该数组，添加一级标签，在遍历时继续遍历它的儿子菜单数组，来添加二级菜单
遍历二级菜单时，使用Yii::$app->user->can($child->url)来判断当前用户是否拥有$child->url这个权限，有才显示，没有就不显示二级菜单，当用户没有某一级菜单下的权限时，整个菜单(包括一级菜单)都不应该显示，所以使用empty($items['items'])来判断是否有子菜单，有子菜单才显示，通过$menuItems[] = $items将上面的所有菜单加入到导航栏
需要注意一下，为了数据的唯一性，可以在config下的main.php的user组件中配置loginUrl参数，然后在其他地方使用Yii::$app->user->loginUrl调用即可

06.23  用户注册与登录、收货地址管理
1.用户注册时发送短信验证码
	使用插件，要注意限制短信发送频率，在封装组件时，每一个方法都要返回，否则通过Yii::$app调用时没有值
2.用户登录
	判断是否存在该用户名，存在即验证输入的密码与数据库存放的hash值是否匹配，匹配则登录成功，登录成功后保存最后登录ip和登陆时间，并且将cookie中存放的购物车数据循环存入数据库，成功后清除cart的cookie
3.收货地址管理增删改查
	要注意收获地址必须和当前登录的用户对应，也就是说，用户只能操作自己的收货地址（通过member_id字段）。
	关于默认地址，每个用户的默认地址最多只能有一个，所以当设置其中一个为默认地址时，一定要将之前的默认地址修改为非默认地址
4.省市县三级联动(纯js，无ajax)
	1）准备一个address的js文件（我们使用的是一个数组形式的js文件），然后视图中引入该文件
	2）循环读出所有省$(address).each();  然后追加到省的下拉框$("#address-province").append(option);  #address-province=>下拉框id，option=>自定义的变量，保存option的html
	3）切换（选中）省，读取该省对应的市，更新到市下拉框（省下拉框的onchange事件）
		获取当前选中的省及其对应的市的数据（循环address数组，若其name等于当前的省，就遍历其下的city数组），区县同理（先获取到选中的省、市，再遍历该市下面的区县）。
	4）为了在第二次及以后选择省、市时，对应的市、区县数据是覆盖，而不是追加，需要在读出城市数据和区县数据后清空。（可以删除，也可以设置为初始样式：$("#address-county").html('<option value="">=请选择县=</option>');）
	5）为了在修改或者其他需要回显省市县的情况下回显数据，可以设置一个空字符串，判断控制器返回的模型中是否存在省市县数据，存在就拼接字符串
	

06.24  购物车
一、未登录（cookie）
    1.首先判断之前购物车中是否有数据,使用\Yii::$app->request->cookies;
    2.判断商品添加的商品购物车中是否存在，如果存在就将商品数量累加，不存在直接赋值
    3.将购物车数据存入cookie，因为是存入，也就是可写的cookie，那么就使用\Yii::$app->response->cookies;
    注：因为Cookie对象中的value必须是一个字符串，所以需要序列化存入，那么在读出的时候就需要反序列化
二、已登录
    1.登录后应该将数据存入数据库，但是要根据当前登录的用户来判定
    2.判断数据库中是否存在该商品，存在就累加商品数量，不存在就直接赋值
    3.存入数据库
三、登陆后合并数据
    1.执行时间：在登录成功后执行
    2.获取到cookie中的数据
    3.循环存入数据库  \Yii::$app->response->cookies->remove('cart');
    4.为了防止下一次登录后购物车中的商品依然存在，清除购物车的cookie

06.25  订单
1.获取到所有数据：post提交的和数据库查询的
2.事务回滚
	如果某一个商品库存不足，那么同一个购物车中的所有物品都不会删除，商品的的数量也不会减少。
	如果库存都够，那么就用数据库中的商品数量-用户所购买的数量，修改商品表中的库存。
3.超时未付款的订单
	1）因为不是所有的订单用户都会立即结算，有些只是添加到订单但是并没有买的意愿，针对这种订单就应该删除掉(逻辑删除)，如果人工删除的话那么工作量可能会很大，并且时间也不够精准，尤其是在做活动时，购买的人数急剧增多，就更难管理，所以我们利用yii2里面的一个yii控制台命令来进行管理。
	2）在控制台的控制器中新建一个逻辑删除的方法，查找所有状态为未付款并且订单生成时间超过一个小时的订单，修改其状态为删除，并且要注意，必须将库存修改为之前的数量，也就是用现在的库存加上order_goods订单商品表中订单id对应的商品amount。
	3）如果手动调用方法去清理，那么肯定会耗时耗力，所以我们给整个操作加一个死循环，让它一直执行，为了让服务器有一点休息时间，可以在循环中设置一下sleep(),因为是在控制台中的控制器，可在cmd命令行通过   yii controller名/action名 直接运用


06.26  （模拟面试可能会问）
一、关于短信验证码
    1.防止短信被刷
        1)限制短信发送频率  ==> 阿里大于已经做了限制，但并不是所有运营商都做了
        2)限制必须输入验证码通过后才能获取短信验证码
        3)通过ip+cookie来限制发送的次数
    2.防止网络不好，未收到短信，然后网络好时收到多条验证码
        1)给短信验证码编号，比如验证码001，验证码002等，发送验证码时必须给出提示，如：请输入编号为002的验证码
        2)让XX分钟（短时间）内的短信验证码保持一致

二、关于订单流程
    1.


